import imutils
import argparse
import numpy as np
import cv2
import numpy
import math
from enum import Enum


class GRIPcode:
    """
    An OpenCV pipeline generated by GRIP.
    """

    def __init__(self):
        """initializes all values to presets or None if need to be set
        """

        self.__hsl_threshold_hue = [21.043165467625897, 87.57575757575756]
        self.__hsl_threshold_saturation = [135.29676258992808, 255.0]
        self.__hsl_threshold_luminance = [185.74640287769782, 255.0]

        self.hsl_threshold_output = None

        self.__cv_dilate_src = self.hsl_threshold_output
        self.__cv_dilate_kernel = None
        self.__cv_dilate_anchor = (-1, -1)
        self.__cv_dilate_iterations = 5.0
        self.__cv_dilate_bordertype = cv2.BORDER_CONSTANT
        self.__cv_dilate_bordervalue = (-1)

        self.cv_dilate_output = None

        self.__find_contours_input = self.cv_dilate_output
        self.__find_contours_external_only = False

        self.find_contours_output = None

    def process(self, source0):
        """
        Runs the pipeline and sets all outputs to new values.
        """
        # Step HSL_Threshold0:
        self.__hsl_threshold_input = source0
        (self.hsl_threshold_output) = self.__hsl_threshold(self.__hsl_threshold_input,
                                                           self.__hsl_threshold_hue, self.__hsl_threshold_saturation, self.__hsl_threshold_luminance)

        # Step CV_dilate0:
        self.__cv_dilate_src = self.hsl_threshold_output
        (self.cv_dilate_output) = self.__cv_dilate(self.__cv_dilate_src, self.__cv_dilate_kernel,
                                                   self.__cv_dilate_anchor, self.__cv_dilate_iterations, self.__cv_dilate_bordertype, self.__cv_dilate_bordervalue)

        # Step Find_Contours0:
        self.__find_contours_input = self.cv_dilate_output
        (self.find_contours_output) = self.__find_contours(
            self.__find_contours_input, self.__find_contours_external_only)

    @staticmethod
    def __hsl_threshold(input, hue, sat, lum):
        """Segment an image based on hue, saturation, and luminance ranges.
        Args:
            input: A BGR numpy.ndarray.
            hue: A list of two numbers the are the min and max hue.
            sat: A list of two numbers the are the min and max saturation.
            lum: A list of two numbers the are the min and max luminance.
        Returns:
            A black and white numpy.ndarray.
        """
        out = cv2.cvtColor(input, cv2.COLOR_BGR2HLS)
        return cv2.inRange(out, (hue[0], lum[0], sat[0]),  (hue[1], lum[1], sat[1]))

    @staticmethod
    def __cv_dilate(src, kernel, anchor, iterations, border_type, border_value):
        """Expands area of higher value in an image.
        Args:
           src: A numpy.ndarray.
           kernel: The kernel for dilation. A numpy.ndarray.
           iterations: the number of times to dilate.
           border_type: Opencv enum that represents a border type.
           border_value: value to be used for a constant border.
        Returns:
            A numpy.ndarray after dilation.
        """
        return cv2.dilate(src, kernel, anchor, iterations=(int)(iterations + 0.5),
                          borderType=border_type, borderValue=border_value)

    @staticmethod
    def __find_contours(input, external_only):
        """Sets the values of pixels in a binary image to their distance to the nearest black pixel.
        Args:
            input: A numpy.ndarray.
            external_only: A boolean. If true only external contours are found.
        Return:
            A list of numpy.ndarray where each one represents a contour.
        """
        if(external_only):
            mode = cv2.RETR_EXTERNAL
        else:
            mode = cv2.RETR_LIST
        method = cv2.CHAIN_APPROX_SIMPLE
        contours, hierarchy = cv2.findContours(input, mode=mode, method=method)
        return contours


#img = cv2.imread("1.jpg",1)
#coolprocessor = GRIPcode()
# coolprocessor.process(img)
#cv2.imshow("hsl", coolprocessor.hsl_threshold_output)
#cv2.imshow("find lines", coolprocessor.find_lines_output)
# for line in coolprocessor.find_lines_output:
   # line.drawline(img)
   # print ("{}".format(line.angle()))
   # cv2.putText(img, text, org, fontFace, fontScale, color[, thickness[, lineType[, bottomLeftOrigin]]])
# coolprocessor.find_lines_output[0].drawline(img)
# cv2.imshow('1.jpg',img)
# print ("{}".format(coolprocessor.find_lines_output[0].angle()))
# cv2.waitKey(0)
# cv2.destroyAllWindows()
# hslimage = coolprocessor.hsl_threshold_output

# WE ARE WORKING ON A  WAY TO PRINT ALL OF THE ANGLES ON OF ALL THE LINES THAT ARE BEING DRAWN

# find contours in the thresholded image


goalFinder = GRIPcode()
img = cv2.imread('8.jpg',1)
goalFinder.process(img)
filteredContours=[]


for contour in goalFinder.find_contours_output:

    area=cv2.contourArea(contour)
    if area>10000:
        filteredContours.append(contour)

totalX, totalY = 0, 0

for contour in filteredContours:
    M = cv2.moments(contour)
    cX = int(M["m10"] / M["m00"])
    cY = int(M["m01"] / M["m00"])
    contourArea = cv2.contourArea(contour)

    rect = cv2.minAreaRect(contour)
    box = cv2.boxPoints(rect)
    dBox = np.int0(box)
    cv2.drawContours(img,[dBox],0,(0,0,255),2)
    x, y, w, h = cv2.boundingRect(contour)
    print ("Here is stuff", x, y, w, h)
    totalX += cX
    totalY += cY

    print("contour points {},{}".format(cX,cY))
    cv2.circle(img, (cX, cY), 7, (0, 0, 0), -1)

    # cv2.drawContours(img, [contour], -1, (255, 0, 0), 2)
cv2.drawContours(img, filteredContours, -1, (255, 0, 0), 2)


avgPoint = (int(totalX / len(filteredContours)), int(totalY / len(filteredContours)))

dimensions = img.shape
width = img.shape[1]



#print('Image Width        : ',width)

#table.putNumber("Vision Correction", avgPoint[0])

print("Middle Contour Point {},{}".format(avgPoint[0],avgPoint[1]))
cv2.circle(img, (avgPoint), 7, (0, 0, 0), -1)
#print(width)
#print(M)
#print(cv2.boxPoints(rect))
#print(box.length())
cv2.imshow('image',img)
cv2.imshow('dialated image',goalFinder.cv_dilate_output)
cv2.waitKey(0)
cv2.debox